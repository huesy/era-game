# ======================================================================
# Makefile for Building 'engine' Library and 'game' Executable
# ======================================================================

# ----------------------------
# 1. Detect Operating System
# ----------------------------
UNAME_S := $(shell uname -s)

ifeq ($(UNAME_S),Linux)
    OS := LINUX
    SHARED_LIB_EXT := so
    SHARED_LIB_FLAGS := -shared
    LIB_PREFIX := lib
else ifeq ($(UNAME_S),Darwin)
    OS := MAC
    SHARED_LIB_EXT := dylib
    SHARED_LIB_FLAGS := -shared
    LIB_PREFIX := lib
else ifeq ($(OS),Windows_NT)
    OS := WINDOWS
    SHARED_LIB_EXT := dll
    SHARED_LIB_FLAGS := -shared
    LIB_PREFIX :=
else
    OS := UNKNOWN
    SHARED_LIB_EXT := so
    SHARED_LIB_FLAGS := -shared
    LIB_PREFIX := lib
endif

# ----------------------------
# 2. Compiler and Tools
# ----------------------------
CC := clang

# Compiler Flags
CFLAGS := -Wall -Wextra -fPIC -Iengine/include -Igame/include -MMD -MP

# Linker Flags
LDFLAGS :=

# ----------------------------
# 3. Directories and Files
# ----------------------------
# Build Directories
BUILD_DIR := build
ENGINE_BUILD_DIR := $(BUILD_DIR)/engine
GAME_BUILD_DIR := $(BUILD_DIR)/game
LIB_DIR := $(BUILD_DIR)/lib
BIN_DIR := $(BUILD_DIR)/bin

# Source Directories
ENGINE_SRC_DIR := engine/src
GAME_SRC_DIR := game/src

# Include Directories
ENGINE_INCLUDE_DIR := engine/include
GAME_INCLUDE_DIR := game/include

# Library and Executable Names
ENGINE_LIB := $(LIB_DIR)/$(LIB_PREFIX)engine.$(SHARED_LIB_EXT)
GAME_EXE := $(BIN_DIR)/game$(if $(filter WINDOWS,$(OS)),.exe,)

# ----------------------------
# 4. Source Files
# ----------------------------
# Function to recursively find all .c files
define find_sources
	$(shell find $(1) -name '*.c')
endef

# Find all source files for engine and game
ENGINE_SRC_FILES := $(call find_sources,$(ENGINE_SRC_DIR))
GAME_SRC_FILES := $(call find_sources,$(GAME_SRC_DIR))

# Object Files
ENGINE_OBJ_FILES := $(patsubst $(ENGINE_SRC_DIR)/%.c, $(ENGINE_BUILD_DIR)/%.o, $(ENGINE_SRC_FILES))
GAME_OBJ_FILES := $(patsubst $(GAME_SRC_DIR)/%.c, $(GAME_BUILD_DIR)/%.o, $(GAME_SRC_FILES))

# ----------------------------
# 5. Default Target
# ----------------------------
.PHONY: all
all: $(GAME_EXE)

# ----------------------------
# 6. Build Game Executable
# ----------------------------
$(GAME_EXE): $(GAME_OBJ_FILES) $(ENGINE_LIB)
	@echo "Linking executable $@"
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -o $@ $(GAME_OBJ_FILES) -L$(LIB_DIR) -lengine $(LDFLAGS)

# ----------------------------
# 7. Build Engine Shared Library
# ----------------------------
$(ENGINE_LIB): $(ENGINE_OBJ_FILES)
	@echo "Creating shared library $@"
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) $(SHARED_LIB_FLAGS) -o $@ $(ENGINE_OBJ_FILES)

# ----------------------------
# 8. Compile Engine Source Files
# ----------------------------
$(ENGINE_BUILD_DIR)/%.o: $(ENGINE_SRC_DIR)/%.c
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

# ----------------------------
# 9. Compile Game Source Files
# ----------------------------
$(GAME_BUILD_DIR)/%.o: $(GAME_SRC_DIR)/%.c
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

# ----------------------------
# 10. Dependency Files
# ----------------------------
# Include the dependency files generated by the compiler
-include $(ENGINE_OBJ_FILES:.o=.d)
-include $(GAME_OBJ_FILES:.o=.d)

# ----------------------------
# 11. Clean Target
# ----------------------------
.PHONY: clean
clean:
	@echo "Cleaning build artifacts..."
ifeq ($(OS), WINDOWS)
	@rmdir /S /Q $(BUILD_DIR) 2>nul || echo "No build directory to remove."
else
	@rm -rf $(BUILD_DIR)
endif

# ----------------------------
# 12. Help Target
# ----------------------------
.PHONY: help
help:
	@echo "Makefile Targets:"
	@echo "  all      - Build the 'game' executable"
	@echo "  clean    - Remove all build artifacts"
	@echo "  help     - Show this help message"

# ----------------------------
# 13. Phony Targets
# ----------------------------
.PHONY: all clean help
